package testmodel

import (
	"fmt"
	"sync"
	"time"

	"go.aporeto.io/elemental"
)

// TestTypEnumValue represents the possible values for attribute "typEnum".
type TestTypEnumValue string

const (
	// TestTypEnumValuea represents the value ValueA.
	TestTypEnumValuea TestTypEnumValue = "ValueA"

	// TestTypEnumValueb represents the value ValueB.
	TestTypEnumValueb TestTypEnumValue = "ValueB"
)

// TestIdentity represents the Identity of the object.
var TestIdentity = elemental.Identity{
	Name:     "test",
	Category: "tests",
}

// TestsList represents a list of Tests
type TestsList []*Test

// Identity returns the identity of the objects in the list.
func (o TestsList) Identity() elemental.Identity {

	return TestIdentity
}

// Copy returns a pointer to a copy the TestsList.
func (o TestsList) Copy() elemental.Identifiables {

	copy := append(TestsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the TestsList.
func (o TestsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(TestsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*Test))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o TestsList) List() elemental.IdentifiablesList {

	out := elemental.IdentifiablesList{}
	for _, item := range o {
		out = append(out, item)
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o TestsList) DefaultOrder() []string {

	return []string{
		"flagDefaultOrderingKey",
	}
}

// Version returns the version of the content.
func (o TestsList) Version() int {

	return 1
}

// Test represents the model of a test
type Test struct {
	// This is cool
	FlagAutogenerated string `json:"-" bson:"-"`

	// This is a creation only string
	FlagCreationOnly string `json:"-" bson:"-"`

	// This is cool
	FlagDefaultOrderingKey string `json:"-" bson:"-"`

	// This is cool
	FlagDeprecated string `json:"-" bson:"-"`

	// This is not exposed
	FlagExposed string `json:"flagExposed" bson:"-"`

	// This is cool
	FlagFilterable string `json:"-" bson:"-"`

	// This is cool
	FlagForeignKey string `json:"-" bson:"-"`

	// This is cool
	FlagGenerateGetter string `json:"-" bson:"-"`

	// This is cool
	FlagGenerateSetter string `json:"-" bson:"-"`

	// This is cool
	FlagIdentifier string `json:"flagIdentifier" bson:"_flagidentifier"`

	// This is cool
	FlagIndex string `json:"-" bson:"-"`

	// This is cool
	FlagOrderable string `json:"-" bson:"-"`

	// This is cool
	FlagPrimaryKey string `json:"-" bson:"-"`

	// This is read only
	FlagReadOnly string `json:"-" bson:"-"`

	// This is required
	FlagRequired string `json:"-" bson:"-"`

	// This is secret
	FlagSecret string `json:"-" bson:"-"`

	// This is not stored
	FlagStored string `json:"-" bson:"flagstored"`

	// This is transient
	FlagTransient string `json:"-" bson:"-"`

	// This is unique
	FlagUnique string `json:"-" bson:"-"`

	// This is a bool
	TypBool bool `json:"typBool" bson:"typbool"`

	// This is date
	TypDate time.Time `json:"typDate" bson:"typdate"`

	// This is an enum
	TypEnum TestTypEnumValue `json:"typEnum" bson:"typenum"`

	// This is an  ext
	TypExt map[string]string `json:"typExt" bson:"typext"`

	// This is a string
	TypString string `json:"typString" bson:"typstring"`

	ModelVersion int `json:"-" bson:"_modelversion"`

	sync.Mutex
}

// NewTest returns a new *Test
func NewTest() *Test {

	return &Test{
		ModelVersion: 1,
		FlagRequired: "true",
		TypBool:      true,
		TypEnum:      "valueB",
		TypExt:       make(map[string]string),
		TypString:    "default value",
	}
}

// Identity returns the Identity of the object.
func (o *Test) Identity() elemental.Identity {

	return TestIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Test) Identifier() string {

	return o.FlagIdentifier
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Test) SetIdentifier(id string) {

	o.FlagIdentifier = id
}

// Version returns the hardcoded version of the model.
func (o *Test) Version() int {

	return 1
}

// DefaultOrder returns the list of default ordering fields.
func (o *Test) DefaultOrder() []string {

	return []string{
		"flagDefaultOrderingKey",
	}
}

// Doc returns the documentation for the object
func (o *Test) Doc() string {
	return `This is a test object`
}

func (o *Test) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetFlagGenerateGetter returns the FlagGenerateGetter of the receiver.
func (o *Test) GetFlagGenerateGetter() string {

	return o.FlagGenerateGetter
}

// SetFlagGenerateSetter sets the given FlagGenerateSetter of the receiver.
func (o *Test) SetFlagGenerateSetter(flagGenerateSetter string) {

	o.FlagGenerateSetter = flagGenerateSetter
}

// Validate valides the current information stored into the structure.
func (o *Test) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("typEnum", string(o.TypEnum), []string{"ValueA", "ValueB"}, false); err != nil {
		errors = append(errors, err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Test) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := TestAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return TestLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Test) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return TestAttributesMap
}

// TestAttributesMap represents the map of attribute for Test.
var TestAttributesMap = map[string]elemental.AttributeSpecification{
	"FlagAutogenerated": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Description:    `This is cool`,
		Name:           "flagAutogenerated",
		Type:           "string",
	},
	"FlagCreationOnly": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		CreationOnly:   true,
		Description:    `This is a creation only string`,
		Name:           "flagCreationOnly",
		Type:           "string",
	},
	"FlagDefaultOrderingKey": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		DefaultOrder:   true,
		Description:    `This is cool`,
		Name:           "flagDefaultOrderingKey",
		Type:           "string",
	},
	"FlagDeprecated": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Deprecated:     true,
		Description:    `This is cool`,
		Name:           "flagDeprecated",
		Type:           "string",
	},
	"FlagExposed": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is not exposed`,
		Exposed:        true,
		Name:           "flagExposed",
		Type:           "string",
	},
	"FlagFilterable": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Filterable:     true,
		Name:           "flagFilterable",
		Type:           "string",
	},
	"FlagForeignKey": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		ForeignKey:     true,
		Name:           "flagForeignKey",
		Type:           "string",
	},
	"FlagGenerateGetter": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Getter:         true,
		Name:           "flagGenerateGetter",
		Type:           "string",
	},
	"FlagGenerateSetter": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Name:           "flagGenerateSetter",
		Setter:         true,
		Type:           "string",
	},
	"FlagIdentifier": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Exposed:        true,
		Identifier:     true,
		Name:           "flagIdentifier",
		Stored:         true,
		Type:           "string",
	},
	"FlagIndex": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Index:          true,
		Name:           "flagIndex",
		Type:           "string",
	},
	"FlagOrderable": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Name:           "flagOrderable",
		Orderable:      true,
		Type:           "string",
	},
	"FlagPrimaryKey": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Name:           "flagPrimaryKey",
		PrimaryKey:     true,
		Type:           "string",
	},
	"FlagReadOnly": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is read only`,
		Name:           "flagReadOnly",
		ReadOnly:       true,
		Type:           "string",
	},
	"FlagRequired": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		DefaultValue:   "true",
		Description:    `This is required`,
		Name:           "flagRequired",
		Required:       true,
		Type:           "string",
	},
	"FlagSecret": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is secret`,
		Name:           "flagSecret",
		Type:           "string",
	},
	"FlagStored": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is not stored`,
		Name:           "flagStored",
		Stored:         true,
		Type:           "string",
	},
	"FlagTransient": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is transient`,
		Name:           "flagTransient",
		Transient:      true,
		Type:           "string",
	},
	"FlagUnique": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is unique`,
		Name:           "flagUnique",
		Type:           "string",
	},
	"TypBool": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		DefaultValue:   true,
		Description:    `This is a bool`,
		Exposed:        true,
		Filterable:     true,
		Name:           "typBool",
		Orderable:      true,
		Stored:         true,
		Type:           "boolean",
	},
	"TypDate": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is date`,
		Exposed:        true,
		Filterable:     true,
		Name:           "typDate",
		Orderable:      true,
		Stored:         true,
		Type:           "time",
	},
	"TypEnum": elemental.AttributeSpecification{
		AllowedChoices: []string{"ValueA", "ValueB"},
		DefaultValue:   TestTypEnumValueb,
		Description:    `This is an enum`,
		Exposed:        true,
		Filterable:     true,
		Name:           "typEnum",
		Orderable:      true,
		Stored:         true,
		Type:           "enum",
	},
	"TypExt": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is an  ext`,
		Exposed:        true,
		Filterable:     true,
		Name:           "typExt",
		Orderable:      true,
		Stored:         true,
		SubType:        "string_map",
		Type:           "external",
	},
	"TypString": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		DefaultValue:   "default value",
		Description:    `This is a string`,
		Exposed:        true,
		Filterable:     true,
		Name:           "typString",
		Orderable:      true,
		Stored:         true,
		Type:           "string",
	},
}

// TestLowerCaseAttributesMap represents the map of attribute for Test.
var TestLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"flagautogenerated": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Description:    `This is cool`,
		Name:           "flagAutogenerated",
		Type:           "string",
	},
	"flagcreationonly": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		CreationOnly:   true,
		Description:    `This is a creation only string`,
		Name:           "flagCreationOnly",
		Type:           "string",
	},
	"flagdefaultorderingkey": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		DefaultOrder:   true,
		Description:    `This is cool`,
		Name:           "flagDefaultOrderingKey",
		Type:           "string",
	},
	"flagdeprecated": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Deprecated:     true,
		Description:    `This is cool`,
		Name:           "flagDeprecated",
		Type:           "string",
	},
	"flagexposed": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is not exposed`,
		Exposed:        true,
		Name:           "flagExposed",
		Type:           "string",
	},
	"flagfilterable": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Filterable:     true,
		Name:           "flagFilterable",
		Type:           "string",
	},
	"flagforeignkey": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		ForeignKey:     true,
		Name:           "flagForeignKey",
		Type:           "string",
	},
	"flaggenerategetter": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Getter:         true,
		Name:           "flagGenerateGetter",
		Type:           "string",
	},
	"flaggeneratesetter": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Name:           "flagGenerateSetter",
		Setter:         true,
		Type:           "string",
	},
	"flagidentifier": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Exposed:        true,
		Identifier:     true,
		Name:           "flagIdentifier",
		Stored:         true,
		Type:           "string",
	},
	"flagindex": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Index:          true,
		Name:           "flagIndex",
		Type:           "string",
	},
	"flagorderable": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Name:           "flagOrderable",
		Orderable:      true,
		Type:           "string",
	},
	"flagprimarykey": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is cool`,
		Name:           "flagPrimaryKey",
		PrimaryKey:     true,
		Type:           "string",
	},
	"flagreadonly": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is read only`,
		Name:           "flagReadOnly",
		ReadOnly:       true,
		Type:           "string",
	},
	"flagrequired": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		DefaultValue:   "true",
		Description:    `This is required`,
		Name:           "flagRequired",
		Required:       true,
		Type:           "string",
	},
	"flagsecret": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is secret`,
		Name:           "flagSecret",
		Type:           "string",
	},
	"flagstored": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is not stored`,
		Name:           "flagStored",
		Stored:         true,
		Type:           "string",
	},
	"flagtransient": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is transient`,
		Name:           "flagTransient",
		Transient:      true,
		Type:           "string",
	},
	"flagunique": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is unique`,
		Name:           "flagUnique",
		Type:           "string",
	},
	"typbool": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		DefaultValue:   true,
		Description:    `This is a bool`,
		Exposed:        true,
		Filterable:     true,
		Name:           "typBool",
		Orderable:      true,
		Stored:         true,
		Type:           "boolean",
	},
	"typdate": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is date`,
		Exposed:        true,
		Filterable:     true,
		Name:           "typDate",
		Orderable:      true,
		Stored:         true,
		Type:           "time",
	},
	"typenum": elemental.AttributeSpecification{
		AllowedChoices: []string{"ValueA", "ValueB"},
		DefaultValue:   TestTypEnumValueb,
		Description:    `This is an enum`,
		Exposed:        true,
		Filterable:     true,
		Name:           "typEnum",
		Orderable:      true,
		Stored:         true,
		Type:           "enum",
	},
	"typext": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `This is an  ext`,
		Exposed:        true,
		Filterable:     true,
		Name:           "typExt",
		Orderable:      true,
		Stored:         true,
		SubType:        "string_map",
		Type:           "external",
	},
	"typstring": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		DefaultValue:   "default value",
		Description:    `This is a string`,
		Exposed:        true,
		Filterable:     true,
		Name:           "typString",
		Orderable:      true,
		Stored:         true,
		Type:           "string",
	},
}
