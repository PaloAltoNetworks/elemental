package {{ .Set.Configuration.Name }}

import (
    "fmt"
    "sync"

    "github.com/aporeto-inc/elemental"
    {{ range .Spec.TypeProviders -}}
    "{{ . }}"
    {{ end -}}
)

{{ $latestVersion := .Spec.LatestAttributesVersion }}

{{ range $i, $enum := buildEnums .Spec $latestVersion }}
// {{ $enum.Type }} represents the possible values for attribute "{{ $enum.AttributeName }}".
type {{ $enum.Type }} string

const (
    {{- range $name, $value := $enum.Values }}
    // {{ $name }} represents the value {{ $value }}.
    {{ $name }} {{ $enum.Type }} = "{{ $value }}"
    {{ end }}
)
{{ end }}

// {{ .Spec.Model.EntityName }}Identity represents the Identity of the object.
var {{ .Spec.Model.EntityName }}Identity = elemental.Identity {
    Name:     "{{ .Spec.Model.RestName}}",
    Category: "{{ .Spec.Model.ResourceName }}",
    Private:  {{ .Spec.Model.Private}},
}


{{ if not .Spec.Model.IsRoot }}
// {{ .Spec.Model.EntityNamePlural }}List represents a list of {{ .Spec.Model.EntityNamePlural }}
type {{ .Spec.Model.EntityNamePlural }}List []*{{ .Spec.Model.EntityName}}

// Identity returns the identity of the objects in the list.
func (o {{ .Spec.Model.EntityNamePlural }}List) Identity() elemental.Identity {

    return {{ .Spec.Model.EntityName}}Identity
}

// Copy returns a pointer to a copy the {{ .Spec.Model.EntityNamePlural }}List.
func (o {{ .Spec.Model.EntityNamePlural }}List) Copy() elemental.Identifiables {

    copy := append({{ .Spec.Model.EntityNamePlural }}List{}, o...)
    return &copy
}

// Append appends the objects to the a new copy of the {{ .Spec.Model.EntityNamePlural }}List.
func (o {{ .Spec.Model.EntityNamePlural }}List) Append(objects ...elemental.Identifiable) elemental.Identifiables {

    out := append({{ .Spec.Model.EntityNamePlural }}List{}, o...)
    for _, obj := range objects {
        out = append(out, obj.(*{{ .Spec.Model.EntityName}}))
    }

    return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o {{ .Spec.Model.EntityNamePlural }}List) List() elemental.IdentifiablesList {

    out := elemental.IdentifiablesList{}
    for _, item := range o {
        out = append(out, item)
    }

    return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o {{ .Spec.Model.EntityNamePlural }}List) DefaultOrder() []string {

    return []string{
        {{ range .Spec.OrderingAttributes $latestVersion -}}
        "{{ .Name }}",
        {{ end }}
    }
}

// Version returns the version of the content.
func (o {{ .Spec.Model.EntityNamePlural }}List) Version() int {

    return {{ .Set.APIInfo.Version }}
}

{{ end }}


// {{ .Spec.Model.EntityName }} represents the model of a {{ .Spec.Model.RestName }}
type {{ .Spec.Model.EntityName }} struct {
{{ range .Spec.Attributes $latestVersion -}}
{{ makeAttr . $.PublicMode }}
{{- end }}

    ModelVersion int `json:"-" bson:"_modelversion"`

    sync.Mutex
}

// New{{ .Spec.Model.EntityName }} returns a new *{{ .Spec.Model.EntityName }}
func New{{ .Spec.Model.EntityName }}() *{{ .Spec.Model.EntityName }} {

    return &{{ .Spec.Model.EntityName }}{
        ModelVersion: {{ .Set.APIInfo.Version }},
        {{ range $name, $constructor := .Spec.AttributeInitializers $latestVersion -}}
        {{ if shouldWriteInitializer $.Spec $name $latestVersion $.PublicMode }}{{ $name }}: {{ $constructor }},{{ end }}
        {{ end }}
    }
}

// Identity returns the Identity of the object.
func (o *{{ .Spec.Model.EntityName }}) Identity() elemental.Identity {

    return {{ .Spec.Model.EntityName }}Identity
}

// Identifier returns the value of the object's unique identifier.
func (o *{{ .Spec.Model.EntityName }}) Identifier() string {

    {{ if .Spec.Identifier -}}
    return o.{{ .Spec.Identifier.ConvertedName }}
    {{- else -}}
    return ""
    {{- end }}
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *{{ .Spec.Model.EntityName }}) SetIdentifier(id string) {

    {{ if .Spec.Identifier -}}
    o.{{ .Spec.Identifier.ConvertedName }} = id
    {{- end }}
}

// Version returns the hardcoded version of the model.
func (o *{{ .Spec.Model.EntityName }}) Version() int {

    return {{ .Set.APIInfo.Version }}
}

// DefaultOrder returns the list of default ordering fields.
func (o *{{ .Spec.Model.EntityName  }}) DefaultOrder() []string {

    return []string{
        {{ range .Spec.OrderingAttributes $latestVersion -}}
        "{{ .Name }}",
        {{ end }}
    }
}

{{ if .Spec.Model.Description }}
// Doc returns the documentation for the object
func (o *{{ .Spec.Model.EntityName }}) Doc() string {

    {{- if eq .Spec.Model.Description "[nodoc]" -}}
    return nodocString
    {{- else }}
    return `{{ escBackticks .Spec.Model.Description }}`
    {{- end }}
}
{{ end }}

func  (o *{{ .Spec.Model.EntityName }}) String() string {

    return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

{{ range .Spec.Attributes $latestVersion }}
{{ if shouldGenerateGetter . $.PublicMode }}
// Get{{ .ConvertedName }} returns the {{ .ConvertedName }} of the receiver.
func (o *{{ $.Spec.Model.EntityName }}) Get{{ .ConvertedName }}() {{ .ConvertedType }} {

    return o.{{ .ConvertedName }}
}

{{ end }}
{{ if shouldGenerateSetter . $.PublicMode }}
// Set{{ .ConvertedName }} sets the given {{ .ConvertedName }} of the receiver.
func (o *{{ $.Spec.Model.EntityName }}) Set{{ .ConvertedName }}({{ .Name }} {{ .ConvertedType }}) {

    o.{{ .ConvertedName }} = {{ .Name }}
}
{{ end }}
{{ end }}

// Validate valides the current information stored into the structure.
func (o *{{ .Spec.Model.EntityName }}) Validate() error {

    errors := elemental.Errors{}
    requiredErrors := elemental.Errors{}

    {{ range .Spec.Attributes $latestVersion }}
    {{ if not .Transient }}
    {{ if .Exposed }}

    {{ if .Required }}
    {{ if eq .Type "string" }}
    if err := elemental.ValidateRequiredString("{{ .Name }}", o.{{ .ConvertedName }}); err != nil {
        requiredErrors = append(requiredErrors, err)
    }
    {{ end }}

    {{ if eq .Type "time" }}
    if err := elemental.ValidateRequiredTime("{{ .Name }}", o.{{ .ConvertedName }}); err != nil {
        requiredErrors = append(requiredErrors, err)
    }
    {{ end }}

    {{ if eq .Type "external" }}
    if err := elemental.ValidateRequiredExternal("{{ .Name }}", o.{{ .ConvertedName }}); err != nil {
        requiredErrors = append(requiredErrors, err)
    }
    {{ end }}

    {{ if eq .Type "integer" }}
    if err := elemental.ValidateRequiredInt("{{ .Name }}", o.{{ .ConvertedName }}); err != nil {
        requiredErrors = append(requiredErrors, err)
    }
    {{ end }}

    {{ if eq .Type "float" }}
    if err := elemental.ValidateRequiredFloat("{{ .Name }}", o.{{ .ConvertedName }}); err != nil {
        requiredErrors = append(requiredErrors, err)
    }
    {{ end }}

    {{ end }}

    {{ if .AllowedChoices }}
    if err := elemental.ValidateStringInList("{{ .Name }}", string(o.{{ .ConvertedName }}), []string{"{{ join .AllowedChoices `", "` }}"}, {{ .Autogenerated }}); err != nil {
        errors = append(errors, err)
    }
    {{ end }}

    {{ if .AllowedChars }}
    if err := elemental.ValidatePattern("{{ .Name }}", o.{{ .ConvertedName }}, `{{ .AllowedChars }}`, {{ .Required }}); err != nil {
        errors = append(errors, err)
    }
    {{ end }}

    {{ if gt .MaxLength 0 }}
    if err := elemental.ValidateMaximumLength("{{ .Name }}", o.{{ .ConvertedName }}, {{ .MaxLength }}, false); err != nil {
        errors = append(errors, err)
    }
    {{ end }}

    {{ if gt .MinLength 0 }}
    if err := elemental.ValidateMinimumLength("{{ .Name }}", o.{{ .ConvertedName }}, {{ .MinLength }}, false); err != nil {
        errors = append(errors, err)
    }
    {{ end }}

    {{ if gt .MaxValue 0.0 }}
    {{ if eq .Type "float" }}
    if err := elemental.ValidateMaximumFloat("{{ .Name }}", o.{{ .ConvertedName }}, {{ .MaxValue }}, false); err != nil {
        errors = append(errors, err)
    }
    {{ else }}

    if err := elemental.ValidateMaximumInt("{{ .Name }}", o.{{ .ConvertedName }}, int({{ .MaxValue }}), false); err != nil {
        errors = append(errors, err)
    }
    {{ end }}
    {{ end }}

    {{ if gt .MinValue 0.0 }}
    {{ if eq .Type "float" }}
    if err := elemental.ValidateMinimumFloat("{{ .Name }}", o.{{ .ConvertedName }}, {{ .MinValue }}, false); err != nil {
        errors = append(errors, err)
    }
    {{ else }}
    if err := elemental.ValidateMinimumInt("{{ .Name }}", o.{{ .ConvertedName }}, int({{ .MinValue }}), false); err != nil {
        errors = append(errors, err)
    }
    {{ end }}
    {{ end }}
    {{ end }}
    {{ end }}
    {{ end }}

    if len(requiredErrors) > 0 {
      return requiredErrors
    }

    if len(errors) > 0 {
        return errors
    }

    return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*{{ .Spec.Model.EntityName }}) SpecificationForAttribute(name string) elemental.AttributeSpecification {

    if v, ok := {{ .Spec.Model.EntityName }}AttributesMap[name]; ok {
        return v
    }

    // We could not find it, so let's check on the lower case indexed spec map
    return {{ .Spec.Model.EntityName }}LowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*{{ .Spec.Model.EntityName }}) AttributeSpecifications() map[string]elemental.AttributeSpecification {

    return {{ .Spec.Model.EntityName }}AttributesMap
}

// {{ .Spec.Model.EntityName }}AttributesMap represents the map of attribute for {{ .Spec.Model.EntityName }}.
var {{ .Spec.Model.EntityName }}AttributesMap = map[string]elemental.AttributeSpecification{

    {{- range .Spec.Attributes $latestVersion }}
    {{ if shouldWriteAttributeMap . $.PublicMode -}}
    "{{ .ConvertedName }}": elemental.AttributeSpecification{
        {{- if .AllowedChars }}
        AllowedChars: `{{ .AllowedChars}}`,
        {{- end }}
        AllowedChoices: {{ if .AllowedChoices -}}[]string{"{{ join .AllowedChoices `", "` }}"}{{ else }}[]string{}{{ end }},
        {{- if .Autogenerated }}
        Autogenerated: {{ .Autogenerated }},
        {{- end }}
        {{- if .ConvertedName }}
        ConvertedName: "{{ .ConvertedName }}",
        {{- end }}
        {{- if .CreationOnly }}
        CreationOnly: {{ .CreationOnly }},
        {{- end }}
        {{- if .DefaultOrder }}
        DefaultOrder: {{ .DefaultOrder }},
        {{- end }}
        {{- if .DefaultValue }}
        {{ if eq .Type "external" -}}
        DefaultValue: {{ if .DefaultValue }}{{ .Initializer }}{{ else }}nil{{ end }},
        {{- else if eq .Type "enum" -}}
        DefaultValue: {{ if .DefaultValue }}{{ $.Spec.Model.EntityName }}{{ .ConvertedName }}{{ .DefaultValue }}{{ else }}nil{{ end }},
        {{- else if eq .Type "string" -}}
        DefaultValue: {{ if .DefaultValue -}}"{{ .DefaultValue }}"{{ else }}nil{{ end }},
        {{- else -}}
        DefaultValue: {{ if .DefaultValue -}}{{ .DefaultValue }}{{ else }}nil {{ end }},
        {{- end }}
        {{- end }}
        {{- if .Deprecated }}
        Deprecated: {{ .Deprecated }},
        {{- end }}
        {{- if .Description }}
        Description: `{{ escBackticks .Description }}`,
        {{- end }}
        {{- if .Exposed }}
        Exposed: {{ .Exposed }},
        {{- end }}
        {{- if .Filterable }}
        Filterable: {{ .Filterable }},
        {{- end }}
        {{- if .ForeignKey }}
        ForeignKey: {{ .ForeignKey }},
        {{- end }}
        {{- if .Format }}
        Format: "{{ .Format }}",
        {{- end }}
        {{- if .Getter }}
        Getter: {{ .Getter }},
        {{- end }}
        {{- if .Identifier }}
        Identifier: {{ .Identifier }},
        {{- end }}
        {{- if .Index }}
        Index: {{ .Index }},
        {{- end }}
        {{- if .MaxLength }}
        MaxLength: {{ .MaxLength }},
        {{- end }}
        {{- if .MaxValue }}
        MaxValue: {{ .MaxValue }},
        {{- end }}
        {{- if .MinLength }}
        MinLength: {{ .MinLength }},
        {{- end }}
        {{- if .MinValue }}
        MinValue: {{ .MinValue }},
        {{- end }}
        {{- if .Name }}
        Name: "{{ .Name }}",
        {{- end }}
        {{- if .Orderable }}
        Orderable: {{ .Orderable }},
        {{- end }}
        {{- if .PrimaryKey }}
        PrimaryKey: {{ .PrimaryKey }},
        {{- end }}
        {{- if .ReadOnly }}
        ReadOnly: {{ .ReadOnly }},
        {{- end }}
        {{- if .Required }}
        Required: {{ .Required }},
        {{- end }}
        {{- if .Setter }}
        Setter: {{ .Setter }},
        {{- end }}
        {{- if .Stored }}
        Stored: {{ .Stored }},
        {{- end }}
        {{- if .SubType }}
        SubType: "{{ .SubType }}",
        {{- end }}
        {{- if .Transient }}
        Transient: {{ .Transient }},
        {{- end }}
        {{- if .Type }}
        Type: "{{ .Type }}",
        {{- end }}
    },
    {{- end }}
    {{- end }}
}

// {{ .Spec.Model.EntityName }}LowerCaseAttributesMap represents the map of attribute for {{ .Spec.Model.EntityName }}.
var {{ .Spec.Model.EntityName }}LowerCaseAttributesMap = map[string]elemental.AttributeSpecification{

    {{- range .Spec.Attributes $latestVersion }}
    {{ if shouldWriteAttributeMap . $.PublicMode -}}
    "{{ lower .Name }}": elemental.AttributeSpecification{
        {{- if .AllowedChars }}
        AllowedChars: `{{ .AllowedChars}}`,
        {{- end }}
        AllowedChoices: {{ if .AllowedChoices -}}[]string{"{{ join .AllowedChoices `", "` }}"}{{ else }}[]string{}{{ end }},
        {{- if .Autogenerated }}
        Autogenerated: {{ .Autogenerated }},
        {{- end }}
        {{- if .ConvertedName }}
        ConvertedName: "{{ .ConvertedName }}",
        {{- end }}
        {{- if .CreationOnly }}
        CreationOnly: {{ .CreationOnly }},
        {{- end }}
        {{- if .DefaultOrder }}
        DefaultOrder: {{ .DefaultOrder }},
        {{- end }}
        {{- if .DefaultValue }}
        {{ if eq .Type "external" -}}
        DefaultValue: {{ if .DefaultValue }}{{ .Initializer }}{{ else }}nil{{ end }},
        {{- else if eq .Type "enum" -}}
        DefaultValue: {{ if .DefaultValue }}{{ $.Spec.Model.EntityName }}{{ .ConvertedName }}{{ .DefaultValue }}{{ else }}nil{{ end }},
        {{- else if eq .Type "string" -}}
        DefaultValue: {{ if .DefaultValue -}}"{{ .DefaultValue }}"{{ else }}nil{{ end }},
        {{- else -}}
        DefaultValue: {{ if .DefaultValue -}}{{ .DefaultValue }}{{ else }}nil {{ end }},
        {{- end }}
        {{- end }}
        {{- if .Deprecated }}
        Deprecated: {{ .Deprecated }},
        {{- end }}
        {{- if .Description }}
        Description: `{{ escBackticks .Description }}`,
        {{- end }}
        {{- if .Exposed }}
        Exposed: {{ .Exposed }},
        {{- end }}
        {{- if .Filterable }}
        Filterable: {{ .Filterable }},
        {{- end }}
        {{- if .ForeignKey }}
        ForeignKey: {{ .ForeignKey }},
        {{- end }}
        {{- if .Format }}
        Format: "{{ .Format }}",
        {{- end }}
        {{- if .Getter }}
        Getter: {{ .Getter }},
        {{- end }}
        {{- if .Identifier }}
        Identifier: {{ .Identifier }},
        {{- end }}
        {{- if .Index }}
        Index: {{ .Index }},
        {{- end }}
        {{- if .MaxLength }}
        MaxLength: {{ .MaxLength }},
        {{- end }}
        {{- if .MaxValue }}
        MaxValue: {{ .MaxValue }},
        {{- end }}
        {{- if .MinLength }}
        MinLength: {{ .MinLength }},
        {{- end }}
        {{- if .MinValue }}
        MinValue: {{ .MinValue }},
        {{- end }}
        {{- if .Name }}
        Name: "{{ .Name }}",
        {{- end }}
        {{- if .Orderable }}
        Orderable: {{ .Orderable }},
        {{- end }}
        {{- if .PrimaryKey }}
        PrimaryKey: {{ .PrimaryKey }},
        {{- end }}
        {{- if .ReadOnly }}
        ReadOnly: {{ .ReadOnly }},
        {{- end }}
        {{- if .Required }}
        Required: {{ .Required }},
        {{- end }}
        {{- if .Setter }}
        Setter: {{ .Setter }},
        {{- end }}
        {{- if .Stored }}
        Stored: {{ .Stored }},
        {{- end }}
        {{- if .SubType }}
        SubType: "{{ .SubType }}",
        {{- end }}
        {{- if .Transient }}
        Transient: {{ .Transient }},
        {{- end }}
        {{- if .Type }}
        Type: "{{ .Type }}",
        {{- end }}
    },
    {{- end }}
    {{- end }}
}
