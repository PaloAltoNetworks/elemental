package {{ .Set.Configuration.Name }}

import "go.aporeto.io/elemental"

var (
    identityNamesMap = map[string]elemental.Identity {
        {{- range .Set.Specifications }}
        {{ if shouldRegisterSpecification . $.PublicMode }}
        {{- $entityName := .Model.EntityName -}}
        "{{.Model.RestName}}": {{ $entityName }}Identity,
        {{- end }}
        {{- end }}
    }

    identitycategoriesMap = map[string]elemental.Identity {
        {{- range .Set.Specifications }}
        {{ if shouldRegisterSpecification . $.PublicMode }}
        {{- $entityName := .Model.EntityName -}}
        "{{.Model.ResourceName}}": {{ $entityName }}Identity,
        {{- end }}
        {{- end }}
    }

    aliasesMap = map[string]elemental.Identity {
        {{- range .Set.Specifications }}
        {{- if shouldRegisterSpecification . $.PublicMode }}
        {{- $entityName := .Model.EntityName -}}
        {{ range $i, $alias := .Model.Aliases }}
        "{{ $alias }}": {{ $entityName }}Identity,
        {{- end }}
        {{- end }}
        {{- end }}
    }

    indexesMap = map[string][][]string {
        {{- range .Set.Specifications }}
        {{- if shouldRegisterSpecification . $.PublicMode }}
        "{{ .Model.RestName }}": {{ if len .Indexes }} {
            {{- range $i, $compound := .Indexes }}
            { {{- range $compound }}"{{ . }}",{{- end }} },
        {{- end }}
        },{{ else }}nil,{{- end }}
        {{- end }}
        {{- end }}
    }
)

// ModelVersion returns the current version of the model.
func ModelVersion() float64 { return {{ .Set.APIInfo.Version }} }

type modelManager struct{}

func(f modelManager) IdentityFromName(name string) elemental.Identity {

    return identityNamesMap[name]
}

func(f modelManager) IdentityFromCategory(category string) elemental.Identity {

    return identitycategoriesMap[category]
}

func(f modelManager) IdentityFromAlias(alias string) elemental.Identity {

    return aliasesMap[alias]
}

func(f modelManager) IdentityFromAny(any string) (i elemental.Identity) {

    if i = f.IdentityFromName(any); !i.IsEmpty() {
        return i
    }

    if i = f.IdentityFromCategory(any); !i.IsEmpty() {
        return i
    }

    return f.IdentityFromAlias(any)
}

func(f modelManager) Identifiable(identity elemental.Identity) elemental.Identifiable {

    switch identity {
    {{ range .Set.Specifications }}
    {{- if shouldRegisterSpecification . $.PublicMode }}
    case {{ .Model.EntityName }}Identity:
        return New{{ .Model.EntityName }}()
    {{- end }}
    {{- end }}
    default:
        return nil
    }
}

func(f modelManager) SparseIdentifiable(identity elemental.Identity) elemental.SparseIdentifiable {

    switch identity {
    {{ range .Set.Specifications }}
    {{- if shouldRegisterSpecification . $.PublicMode }}
    {{- if not .Model.IsRoot }}
    case {{ .Model.EntityName }}Identity:
        return NewSparse{{ .Model.EntityName }}()
    {{- end }}
    {{- end }}
    {{- end }}
    default:
        return nil
    }
}

func(f modelManager) Indexes(identity elemental.Identity) [][]string {

    return indexesMap[identity.Name]
}

func(f modelManager) IdentifiableFromString(any string) elemental.Identifiable {

    return f.Identifiable(f.IdentityFromAny(any))
}

func(f modelManager) Identifiables(identity elemental.Identity) elemental.Identifiables {

    switch identity {
    {{ range .Set.Specifications }}
    {{- if not .Model.IsRoot }}
    {{- if shouldRegisterSpecification . $.PublicMode }}
    case {{ .Model.EntityName }}Identity:
        return &{{ .Model.EntityNamePlural }}List{}
    {{- end }}
    {{- end }}
    {{- end }}
    default:
        return nil
    }
}

func(f modelManager) SparseIdentifiables(identity elemental.Identity) elemental.SparseIdentifiables {

    switch identity {
    {{ range .Set.Specifications }}
    {{- if not .Model.IsRoot }}
    {{- if shouldRegisterSpecification . $.PublicMode }}
    case {{ .Model.EntityName }}Identity:
        return &Sparse{{ .Model.EntityNamePlural }}List{}
    {{- end }}
    {{- end }}
    {{- end }}
    default:
        return nil
    }
}

func(f modelManager) IdentifiablesFromString(any string) elemental.Identifiables {

    return f.Identifiables(f.IdentityFromAny(any))
}

func(f modelManager) Relationships() elemental.RelationshipsRegistry {

    return relationshipsRegistry
}

var manager = modelManager{}

// Manager returns the model elemental.ModelManager.
func Manager() elemental.ModelManager { return manager }


// AllIdentities returns all existing identities.
func AllIdentities() []elemental.Identity {

    return []elemental.Identity{
        {{- range .Set.Specifications }}
        {{- if shouldRegisterSpecification . $.PublicMode }}
        {{ .Model.EntityName }}Identity,
        {{- end }}
        {{- end }}
    }
}

// AliasesForIdentity returns all the aliases for the given identity.
func AliasesForIdentity(identity elemental.Identity) []string {

    switch identity {
    {{- range .Set.Specifications }}
    {{- if shouldRegisterSpecification . $.PublicMode }}
    case {{ .Model.EntityName }}Identity:
        return []string{ {{ range $i, $alias := .Model.Aliases }}
        "{{ $alias }}",
        {{- end }}
        }
    {{- end }}
    {{- end }}
    }

    return nil
}
