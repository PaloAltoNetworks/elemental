package {{ .Set.Configuration.Name }}

import "go.aporeto.io/elemental"

const nodocString = "[nodoc]" // nolint: varcheck,deadcode

var relationshipsRegistry elemental.RelationshipsRegistry

func init() {

    relationshipsRegistry = elemental.RelationshipsRegistry{}

    {{ range $entityName, $relation := .Set.Relationships }}
    {{- if shouldRegisterRelationship $.Set $entityName $.PublicMode}}
    relationshipsRegistry[{{ $entityName }}Identity] = &elemental.Relationship{
        {{- if gt (len $relation.Create) 0 }}
        Create: map[string]*elemental.RelationshipInfo {
            {{- range $parent, $action := $relation.Create }}
            {{- if shouldRegisterInnerRelationship $.Set $parent $.PublicMode }}
            "{{ $parent }}" : (&elemental.RelationshipInfo{
                {{- if $action.Deprecated }}
                Deprecated: true,
                {{- end }}
                {{- if gt (len $action.Parameters) 0 }}
                Parameters: []elemental.Parameter{
                {{- range $i, $p := $action.Parameters }}
                    elemental.Parameter{
                        Name: "{{$p.Name}}",
                        Type: "{{ $p.Type }}",
                        {{- if $p.Multiple }}
                        Multiple: true,
                        {{- end }}
                    },
                {{- end }}
                },
                {{- end }}
            }).Build(),
            {{- end }}
            {{- end }}
        },
        {{- end }}
        {{- if gt (len $relation.Update) 0 }}
        Update: map[string]*elemental.RelationshipInfo {
            {{- range $parent, $action := $relation.Update }}
            {{- if shouldRegisterInnerRelationship $.Set $parent $.PublicMode }}
            "{{ $parent }}" : (&elemental.RelationshipInfo{
                {{- if $action.Deprecated }}
                Deprecated: true,
                {{- end }}
                {{- if gt (len $action.Parameters) 0 }}
                Parameters: []elemental.Parameter{
                {{- range $i, $p := $action.Parameters }}
                    elemental.Parameter{
                        Name: "{{ $p.Name }}",
                        Type: "{{ $p.Type }}",
                        {{- if $p.DefaultValue }}
                        {{- if eq $p.Type "string" }}
                        DefaultValue: "{{ $p.DefaultValue }}",
                        {{- else }}
                        DefaultValue: {{ $p.DefaultValue }},
                        {{- end }}
                        {{- end }}
                        {{- if eq $p.Type "enum" }}
                        AllowedChoices: []string{
                            {{- range $j, $v := $p.AllowedChoices }}
                            "{{ $v }}",
                            {{- end }}
                        },
                        {{- end }}
                        {{- if $p.Required }}
                        Required: true,
                        {{- end }}
                        {{- if $p.Multiple }}
                        Multiple: true,
                        {{- end }}
                    },
                {{- end }}
                },
                {{- end }}
            }).Build(),
            {{- end }}
            {{- end }}
        },
        Patch: map[string]*elemental.RelationshipInfo {
            {{- range $parent, $action := $relation.Update }}
            {{- if shouldRegisterInnerRelationship $.Set $parent $.PublicMode }}
            "{{ $parent }}" : (&elemental.RelationshipInfo{
                {{- if $action.Deprecated }}
                Deprecated: true,
                {{- end }}
                {{- if gt (len $action.Parameters) 0 }}
                Parameters: []elemental.Parameter{
                {{- range $i, $p := $action.Parameters }}
                    elemental.Parameter{
                        Name: "{{ $p.Name }}",
                        Type: "{{ $p.Type }}",
                        {{- if $p.DefaultValue }}
                        {{- if eq $p.Type "string" }}
                        DefaultValue: "{{ $p.DefaultValue }}",
                        {{- else }}
                        DefaultValue: {{ $p.DefaultValue }},
                        {{- end }}
                        {{- end }}
                        {{- if eq $p.Type "enum" }}
                        AllowedChoices: []string{
                            {{- range $j, $v := $p.AllowedChoices }}
                            "{{ $v }}",
                            {{- end }}
                        },
                        {{- end }}
                        {{- if $p.Required }}
                        Required: true,
                        {{- end }}
                        {{- if $p.Multiple }}
                        Multiple: true,
                        {{- end }}
                    },
                {{- end }}
                },
                {{- end }}
            }).Build(),
            {{- end }}
            {{- end }}
        },
        {{- end }}
        {{- if gt (len $relation.Delete) 0 }}
        Delete: map[string]*elemental.RelationshipInfo {
            {{- range $parent, $action := $relation.Delete }}
            {{- if shouldRegisterInnerRelationship $.Set $parent $.PublicMode }}
            "{{ $parent }}" : (&elemental.RelationshipInfo{
                {{- if $action.Deprecated }}
                Deprecated: true,
                {{- end }}
                {{- if gt (len $action.Parameters) 0 }}
                Parameters: []elemental.Parameter{
                {{- range $i, $p := $action.Parameters }}
                    elemental.Parameter{
                        Name: "{{ $p.Name }}",
                        Type: "{{ $p.Type }}",
                        {{- if $p.DefaultValue }}
                        {{- if eq $p.Type "string" }}
                        DefaultValue: "{{ $p.DefaultValue }}",
                        {{- else }}
                        DefaultValue: {{ $p.DefaultValue }},
                        {{- end }}
                        {{- end }}
                        {{- if eq $p.Type "enum" }}
                        AllowedChoices: []string{
                            {{- range $j, $v := $p.AllowedChoices }}
                            "{{ $v }}",
                            {{- end }}
                        },
                        {{- end }}
                        {{- if $p.Required }}
                        Required: true,
                        {{- end }}
                        {{- if $p.Multiple }}
                        Multiple: true,
                        {{- end }}
                    },
                {{- end }}
                },
                {{- end }}
            }).Build(),
            {{- end }}
            {{- end }}
        },
        {{- end }}
        {{- if gt (len $relation.Get) 0 }}
        Retrieve: map[string]*elemental.RelationshipInfo {
            {{- range $parent, $action := $relation.Get }}
            {{- if shouldRegisterInnerRelationship $.Set $parent $.PublicMode }}
            "{{ $parent }}" : (&elemental.RelationshipInfo{
                {{- if $action.Deprecated }}
                Deprecated: true,
                {{- end }}
                {{- if gt (len $action.Parameters) 0 }}
                Parameters: []elemental.Parameter{
                {{- range $i, $p := $action.Parameters }}
                    elemental.Parameter{
                        Name: "{{ $p.Name }}",
                        Type: "{{ $p.Type }}",
                        {{- if $p.DefaultValue }}
                        {{- if eq $p.Type "string" }}
                        DefaultValue: "{{ $p.DefaultValue }}",
                        {{- else }}
                        DefaultValue: {{ $p.DefaultValue }},
                        {{- end }}
                        {{- end }}
                        {{- if eq $p.Type "enum" }}
                        AllowedChoices: []string{
                            {{- range $j, $v := $p.AllowedChoices }}
                            "{{ $v }}",
                            {{- end }}
                        },
                        {{- end }}
                        {{- if $p.Required }}
                        Required: true,
                        {{- end }}
                        {{- if $p.Multiple }}
                        Multiple: true,
                        {{- end }}
                    },
                {{- end }}
                },
                {{- end }}
            }).Build(),
            {{- end }}
            {{- end }}
        },
        {{- end }}
        {{- if gt (len $relation.GetMany) 0 }}
        RetrieveMany: map[string]*elemental.RelationshipInfo {
            {{- range $parent, $action := $relation.GetMany }}
            {{- if shouldRegisterInnerRelationship $.Set $parent $.PublicMode }}
            "{{ $parent }}" : (&elemental.RelationshipInfo{
                {{- if $action.Deprecated }}
                Deprecated: true,
                {{- end }}
                {{- if gt (len $action.Parameters) 0 }}
                Parameters: []elemental.Parameter{
                {{- range $i, $p := $action.Parameters }}
                    elemental.Parameter{
                        Name: "{{ $p.Name }}",
                        Type: "{{ $p.Type }}",
                        {{- if $p.DefaultValue }}
                        {{- if eq $p.Type "string" }}
                        DefaultValue: "{{ $p.DefaultValue }}",
                        {{- else }}
                        DefaultValue: {{ $p.DefaultValue }},
                        {{- end }}
                        {{- end }}
                        {{- if eq $p.Type "enum" }}
                        AllowedChoices: []string{
                            {{- range $j, $v := $p.AllowedChoices }}
                            "{{ $v }}",
                            {{- end }}
                        },
                        {{- end }}
                        {{- if $p.Required }}
                        Required: true,
                        {{- end }}
                        {{- if $p.Multiple }}
                        Multiple: true,
                        {{- end }}
                    },
                {{- end }}
                },
                {{- end }}
            }).Build(),
            {{- end }}
            {{- end }}
        },
        Info: map[string]*elemental.RelationshipInfo {
            {{- range $parent, $action := $relation.GetMany }}
            {{- if shouldRegisterInnerRelationship $.Set $parent $.PublicMode }}
            "{{ $parent }}" : (&elemental.RelationshipInfo{
                {{- if $action.Deprecated }}
                Deprecated: true,
                {{- end }}
                {{- if gt (len $action.Parameters) 0 }}
                Parameters: []elemental.Parameter{
                {{- range $i, $p := $action.Parameters }}
                    elemental.Parameter{
                        Name: "{{ $p.Name }}",
                        Type: "{{ $p.Type }}",
                        {{- if $p.DefaultValue }}
                        {{- if eq $p.Type "string" }}
                        DefaultValue: "{{ $p.DefaultValue }}",
                        {{- else }}
                        DefaultValue: {{ $p.DefaultValue }},
                        {{- end }}
                        {{- end }}
                        {{- if eq $p.Type "enum" }}
                        AllowedChoices: []string{
                            {{- range $j, $v := $p.AllowedChoices }}
                            "{{ $v }}",
                            {{- end }}
                        },
                        {{- end }}
                        {{- if $p.Required }}
                        Required: true,
                        {{- end }}
                        {{- if $p.Multiple }}
                        Multiple: true,
                        {{- end }}
                    },
                {{- end }}
                },
                {{- end }}
            }).Build(),
            {{- end }}
            {{- end }}
        },
        {{- end }}
    }
    {{- end }}
    {{ end }}
}
