// Code generated by go-bindata.
// sources:
// templates/README.md
// templates/identities_registry.gotpl
// templates/model.gotpl
// templates/relationships_registry.gotpl
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xcb\x11\x02\x21\x10\x45\xd1\x7d\x47\xf1\x2c\x53\x22\x81\xc6\xbe\x0a\xc5\x47\x6a\x60\x33\xd9\xcf\x79\x2b\x31\x56\xf7\xc3\x36\x4b\x85\x8d\xbe\xb5\xa3\x09\xa1\xf3\x57\x46\x8c\x4c\x04\xa1\x3a\x75\x0a\xca\x75\xfa\x75\xbf\xcc\x24\x69\x78\x43\xcb\x3f\xcd\x7f\xd8\x13\x00\x00\xff\xff\xaa\x97\xff\x85\x4d\x00\x00\x00")

func templatesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeMd,
		"templates/README.md",
	)
}

func templatesReadmeMd() (*asset, error) {
	bytes, err := templatesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.md", size: 77, mode: os.FileMode(420), modTime: time.Unix(1515709395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIdentities_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xcf\x6b\xe3\x3a\x10\xbe\xfb\xaf\x18\x42\x79\x38\xd0\x38\x97\xc7\x3b\x14\x7a\x28\xe5\x15\x02\xdb\x52\x5a\xd8\x4b\xe9\x41\x75\xc6\xee\xb0\xb2\x14\xa4\x49\xbb\x45\xf8\x7f\x5f\xfc\x43\xb2\x93\x38\x5e\xef\xa6\xbb\x39\xd9\xf2\xcc\x37\x9f\xe6\xfb\x46\xca\x46\xa4\xdf\x44\x8e\xe0\x1c\x24\x8f\xc8\xc9\xb5\x56\x19\xe5\x5b\x23\x98\xb4\x4a\xee\x44\x81\x50\x96\x51\x44\xc5\x46\x1b\x86\x59\x4e\xfc\xba\x7d\x49\x52\x5d\x2c\xc5\x46\x1b\x64\xbd\x20\x95\x2e\x51\x62\x81\x8a\x85\x9c\x45\x51\xb6\x55\x29\x90\x22\x8e\xe7\xe0\x22\x00\xa8\xb0\x8d\x50\x39\x36\x15\x1e\x37\x98\x52\x46\x69\x5d\xc1\x56\xe8\x55\x4c\x40\x48\x1e\x30\x27\xcb\x68\x56\x6b\x54\x4c\xfc\x11\x3b\x97\xfc\x5f\x3f\x55\x6c\xca\xd2\xaf\xcf\x9d\x03\x54\xeb\x0a\xa0\x8c\xa2\xe5\x12\x6e\xf5\x1a\xe5\x57\x34\x96\xb4\x02\x83\xbc\x35\xca\x02\xbf\x22\xa4\x5b\x63\x50\x31\xbc\xb5\xdf\x74\x56\x2f\x17\x55\x7c\xd2\xf0\xed\xe7\xc6\x73\xc8\xa4\x16\xfc\xdf\xbf\xe0\x5a\x9c\xd0\x9e\xab\xfb\xd5\x4a\x65\x3a\xf1\x65\xca\x12\x9a\xe2\x0d\xab\x8c\xc4\x8b\xc4\x1b\x1d\xc8\x07\x1e\x02\x14\xbe\x03\x29\xcb\x42\xa5\xe8\x29\xf4\xb3\x20\xd3\xa6\x5e\xcc\xe9\x0d\x15\x90\x47\x50\xa2\xc0\x96\xe5\x91\x22\x71\x88\xb5\x6c\x48\xe5\xf3\x5e\x37\xfb\x29\x2e\x8a\x00\xec\x3b\x71\xfa\xda\xc1\x4f\x97\x08\x20\x15\xb6\x71\x4a\xa7\x07\x74\x82\xd4\x6e\xb9\x68\x43\xc1\x77\xee\x0e\xdf\x0f\x32\xe2\x79\x5b\x74\xe1\x15\xac\x5e\xd7\x98\x89\xad\x64\x8f\xd0\xe6\x2b\x92\x11\x80\xd7\x78\xaf\x03\xd7\x82\x31\xd7\xe6\x84\x36\xa7\x1e\xe1\x78\x9b\x7d\x91\x38\xc4\x4e\x6f\x73\x48\xf9\xc4\x36\x7b\x3e\x7f\xb8\xd5\xd7\x5a\x31\x2a\xfe\x75\x63\x8b\xa1\xd4\x09\xee\x1e\x2f\x38\x66\xf2\x81\xcc\x93\xbd\xee\x1c\x50\x06\x4a\x33\x24\x2b\xfb\xa0\x35\xc3\xe2\xa4\x39\xf8\x67\x37\xfe\x5e\x6e\x8d\x90\x50\x96\x5f\xc8\xb2\xeb\x8a\xee\xc8\xf4\x69\xaa\x4d\x98\x93\x29\xaa\x0d\x0d\xcb\x78\xc1\xb1\x99\xf9\x89\x6a\xbf\x35\x3a\x27\xa8\x76\x74\xac\xfe\x92\x72\x57\x52\xb6\x5c\x08\x6d\x27\x94\x94\x80\xdf\xc9\x32\xa9\xdc\x1b\x99\xd0\xb6\xcd\xdf\xc9\x89\xe7\xf0\xf4\xbc\x7f\x24\xd5\xae\x8f\x42\xc9\xa1\x00\x17\x18\x4f\x6b\xf0\x70\xff\xce\x0f\xf7\x5d\xef\xec\x4d\x18\x10\x92\x84\x45\x7b\x2b\x36\x70\x09\x85\xd8\x3c\x35\x66\x18\x26\x3b\x91\x4a\x15\x74\x86\x1d\x93\x8b\xcb\x1d\x62\x8b\x10\xd6\x42\x9d\xd1\x39\x9c\xd5\x44\xea\xd0\xab\x86\x92\x47\x9b\x39\xe7\xbf\x96\xe5\xec\xa2\x4a\xeb\x83\x8f\x6e\xb3\xf7\xd2\xbf\xa4\xf8\xe3\xc6\xe8\xa2\xae\xb3\xf3\x6f\x24\x6c\x55\x58\xab\x53\x12\x8c\x6b\x60\xdd\x9b\xb2\x9a\xc6\xce\x55\xd4\x83\x8a\x1b\x92\xc7\x6e\xa0\x3d\xb9\xbb\xc6\x3f\xd5\x8f\xcf\xc1\x6b\xf5\xfa\xe0\x79\x2e\x65\xcd\xa5\x4d\x3d\x72\x6e\x07\xff\xed\xe3\x74\xc7\xf4\x21\xb5\xca\x9f\x0d\x71\x18\x3d\x9e\x27\xa8\x3f\x3e\xcb\x7b\x73\xe6\xab\xba\xa9\x6e\x38\x74\xc4\x79\x58\xdf\x9b\xec\xea\x37\x30\xf2\x65\x4f\x84\x6a\xcc\xcb\xe8\x47\x00\x00\x00\xff\xff\x3a\xcb\x38\xd5\x69\x0b\x00\x00")

func templatesIdentities_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIdentities_registryGotpl,
		"templates/identities_registry.gotpl",
	)
}

func templatesIdentities_registryGotpl() (*asset, error) {
	bytes, err := templatesIdentities_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/identities_registry.gotpl", size: 2921, mode: os.FileMode(420), modTime: time.Unix(1518756940, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\x98\x13\xba\xbb\xf6\xc1\x51\xfa\xec\xbd\x2c\x50\xb4\xe9\x22\xb8\x76\x1b\x34\x45\xef\xa1\x28\x36\x8c\x34\x76\xd8\x4a\xa4\x4a\x51\x69\x72\x86\xbe\xfb\x82\xff\x24\x52\x96\x2c\x39\x9b\x6e\xfb\x90\x97\x20\x1a\x92\xbf\xf9\xcb\xe1\x0c\xe9\x82\x24\x9f\xc9\x06\x61\xbb\x85\xf8\x02\x65\xfc\x9c\xb3\x35\xdd\x54\x82\x48\xca\x59\xfc\x07\xc9\x11\xea\x7a\x36\xa3\x79\xc1\x85\x84\xf9\x0c\x00\x20\x5a\xe7\x32\x32\xff\x95\x77\x2c\x89\x66\xe6\xff\x0d\x95\xd7\xd5\x55\x9c\xf0\xfc\x98\x14\x5c\xa0\xe4\x47\x94\x25\xc7\x98\x61\x8e\x4c\x92\xcc\x2c\xd9\x6e\x41\x10\xb6\x41\x88\x2f\x0a\x4c\xe2\x77\x77\x05\x9e\x0b\x7e\x43\x53\x14\x25\x1c\xd5\xb5\xc1\x52\xe2\x40\x5d\x37\x4b\x90\xa5\x7a\x70\x31\x9b\xcd\x1a\x84\x27\x74\x09\x4f\x90\x55\x39\xac\x4e\x20\x3e\x65\x55\x5e\x2a\x61\x8f\x8f\xd5\x0a\x3d\xa0\xe1\xa1\xae\x41\x60\x21\xb0\x44\x26\x4b\x90\xd7\x08\x05\x2f\x4b\x7a\x95\x21\xdc\x90\xac\xc2\x12\xd6\x5c\x00\x91\x52\xd0\xab\x4a\xa2\xe6\x6e\x96\x3f\x73\x34\x6b\x88\x28\x9e\x49\x85\xb8\x83\x5f\x4a\x41\xd9\x66\x36\x4b\x38\x2b\x9d\x99\xb6\xdb\x23\x27\x28\x23\x39\x2e\xe1\x89\xe6\xa6\x84\x35\x8b\xdf\x1b\xe6\x56\x67\x2b\x36\x33\x9c\xba\x12\x9b\xa5\x6a\x82\xf9\xaf\xae\x63\x67\x9b\x66\xc9\x8e\x54\x27\x46\x15\xb7\x22\xb0\xa6\x36\x66\xfb\xbf\xb5\x9a\x71\xca\x29\x93\x54\xde\x59\x9d\xcf\x52\xd4\x9f\x5d\x89\x1a\x3a\x5f\xeb\x6f\x7e\xf5\x09\x13\x19\xcf\x6e\x88\x18\x43\x3a\x81\x26\x28\xe2\x86\xb8\xd5\xd2\xa9\xa9\x2b\x68\x62\x40\x83\xbc\xc5\x52\x2a\x7a\x5d\x47\x4b\x3d\xe9\x39\x91\xb8\xe1\xe2\x6e\x15\x4e\xe2\x95\x48\x1a\x4f\x99\x99\xe7\x82\xde\x10\xa9\x10\x9b\x89\x96\x54\xd7\xcb\x59\x6d\xa2\x89\xae\x81\x71\x69\x87\xcf\xca\xb7\x9c\xcb\x36\x8e\xba\x7a\x9c\x67\x95\x20\x19\xd4\xf5\x2b\x5a\x4a\xdf\x26\x04\x32\x45\xe1\xeb\xbd\xab\x9a\xf8\xd9\x8f\xfb\xe1\xe3\xbf\x7b\xe6\x58\x3f\x3d\xe7\x4c\x22\x93\x9e\x63\x64\x25\x98\xf1\x0a\xed\xf5\x4a\x09\x94\xe9\x4f\x25\x62\x3c\x5b\x57\x2c\x81\x39\x1f\x15\x63\xd1\x65\x35\x5f\xf4\x7b\x4e\xdb\xda\x88\xd1\x07\xda\xba\x7e\xe6\x34\x28\x5a\xb1\x09\x14\x9c\x32\x89\x02\x24\x07\x02\x89\x1a\x53\xb2\x8e\x49\x77\x98\x1e\x45\x28\x7c\xa0\xd8\x9a\x12\x95\x0c\xac\x1e\x5a\x80\xd5\x09\x90\xa2\x40\x96\xce\xc7\xc0\xb7\xf5\x12\x78\x1c\xc7\x0b\xdf\x08\x3f\x2b\x10\xab\xec\x33\x8d\x63\xe1\xca\xc0\x2b\x92\xeb\x4f\x02\x0c\xbf\x1a\xbe\xd6\x6d\x0f\xa9\xbb\xe1\x3f\x77\x3c\xe3\x38\xee\xfa\xd0\xe8\x3f\xd1\x3c\xbc\x92\xf7\xb6\x8e\xca\xb3\x7f\x2e\x95\xfa\x0a\xc2\x24\x47\x27\x97\xd9\xff\x8e\x43\xc3\x80\x57\x52\x2f\x88\xe7\xfd\x3b\x62\x61\x90\xeb\x20\x06\x79\x25\xad\xf1\xf5\x6e\x4a\x38\xbb\x41\x21\x7d\xdb\xeb\x58\x63\x3b\xd1\x6c\x54\x2d\x0f\x35\xb1\xfa\xdb\xb3\x37\x3c\xb4\x8e\xf5\xf6\xcc\xdc\xd6\xbe\xa9\xa8\xc4\xdc\xb3\xd5\x5e\x2b\xa9\xb9\xfb\xad\xf1\x02\xd7\xa4\xca\xe4\x1b\x91\xa2\x08\xd2\x46\x6a\x06\x80\xab\x11\xca\x36\xb0\xa6\x98\xa5\xa5\x0b\xc7\xc4\x84\xc3\x21\x26\xf1\x59\xcd\x17\xf0\xe1\xa3\x39\x22\x3b\xc9\xc2\x91\x5b\xb5\x3a\xf5\xc1\x1b\x2b\x50\x73\x12\xb7\x45\x42\x73\x48\x84\x29\x3f\x3c\xe3\x8c\x35\x8c\xf6\xef\x51\x94\x94\xb3\x40\xf1\x1b\x4b\xbb\xbf\xa2\x16\x75\xbe\x00\xca\xac\x9b\xfd\x4c\x88\x32\x7e\x76\x7e\x76\xc6\xd6\x3c\x76\xfc\x6b\x2d\x90\x77\xf6\x0e\x1f\xbe\xdd\x43\x37\xe7\x29\x66\x4a\x58\x02\x3b\xc7\xe3\xbe\xd3\xc5\xd6\x28\x55\xa2\x24\xdc\x6e\x7d\x0b\x77\x2c\xbb\xdd\x42\x4e\x3e\xa3\xa2\xea\x12\x6c\xa6\xca\x18\x27\xa8\xb2\xe6\x6b\x25\x82\x53\x45\xa9\x7c\xf9\xa9\xe4\x6c\x15\x1d\x45\x70\xa5\xff\xf9\x53\x0b\x69\x0d\x1b\x5d\x9a\x55\xaa\x50\x8c\x5f\x57\x12\x6f\xad\x33\xfe\xc0\xaf\x83\x2a\xbb\x73\x41\x65\xc5\xbe\x5d\xaf\x64\xd1\x0e\x1a\x04\x99\x2f\x86\x16\x76\x02\xf0\xe7\xfe\x59\x6d\x3c\xfa\xea\xae\xf6\xb8\x74\xb9\x1b\xc1\xae\xec\xd3\x45\xa1\xb2\x3d\x17\xba\x52\x0d\xcd\x7e\xc6\xa8\xa4\x24\xa3\xff\xf7\x0b\xe0\x4e\x69\xa7\x19\x07\x38\x1d\x86\x3d\xd1\xde\x5b\x1e\x0c\x15\x6d\x2e\xdc\x07\x8c\xb6\x80\xbf\x59\x01\xc0\x4e\x09\xe0\xf2\x5e\x27\x11\x99\x5a\x35\x90\xee\x97\x12\x2a\x46\xbf\x54\xae\xb8\x51\x6b\x26\x4b\xac\x26\xcf\x17\x10\x26\x1f\x53\xf3\xd9\x7a\xaf\x95\xc3\x19\xdf\xa5\xcd\xb8\x81\x6e\x27\xa9\x93\x51\x9d\x25\x98\xba\x40\x74\xa5\x3e\x66\x25\x76\x21\xa2\xa8\x1d\x36\x1e\x32\xca\x5f\xa0\xf4\xf8\x96\x28\x1f\x5a\xf9\x80\xc1\x9c\xa6\xd6\x00\x8b\x89\x16\x98\xa6\x3a\x9c\x00\x4d\xfb\x15\xec\x4b\xb5\xd7\x44\xa4\x09\x4f\x31\xed\x26\x5d\x9d\x2f\x26\x28\xd5\x93\x69\x27\xe6\xda\x7d\x47\x9f\xab\xda\x07\x8e\xc0\x11\xb9\xb4\x60\x3f\xda\x59\xe7\x7b\xf7\x05\x96\x89\xa0\x85\xb4\xc6\x50\x96\xe0\x49\x78\xf6\xf3\xa4\xd2\x1b\x5a\xcf\x51\x75\x47\x1b\x7e\xe3\x4e\x79\xc1\x93\x9e\xfd\x75\xa4\x04\xc0\x2f\x3d\x32\x44\x1f\x18\x4f\x79\xf2\x31\xea\xee\x15\x4d\xbe\x30\x7d\x74\xb0\xa7\xc2\x69\x97\x8d\x20\xa1\x66\x97\xbb\x81\xe8\x9d\xb0\x5a\x8d\xfd\x3b\x46\x73\xde\x51\xc5\x72\x5d\xe7\x32\xbe\x28\x04\x65\x72\x3d\x8f\xfe\xf3\x53\xb9\xfa\xa9\xfc\x2d\x52\x95\x6d\x9b\x17\xb5\x6b\x5a\x92\x49\x3c\x0b\xeb\x8e\x81\x03\xd7\x9c\xb7\xca\x57\xbf\xa3\x54\x1d\x90\xf1\xd0\xef\x28\x95\x98\x3b\xfb\xcd\xf7\x5a\xef\x04\xbb\xa1\x04\x26\x48\x6f\xba\x89\xe2\x49\xaf\xde\x03\xbc\xe6\x8b\x90\x83\xbb\x52\x08\xcd\x62\xf2\xc4\x4e\x4a\x0c\xaa\x1b\x17\x8c\xbe\x82\x17\x03\x0a\x36\x99\x70\x43\x6f\x90\x3d\x98\x8e\x03\xec\xe6\xde\x86\xea\xd5\xb6\x49\x97\xfd\x7a\xc2\x09\x78\x08\x41\xc0\x85\x17\x2b\xef\x49\x46\x53\x22\x75\x82\xa7\x29\x1a\x15\x93\x4a\x08\x64\x12\x28\x5b\x73\x91\x9b\xcd\x57\x4a\x2e\x30\x55\xe9\xcd\x34\x86\xe6\xb8\xaf\x04\x4e\xc9\x8e\x96\x89\x3a\xa1\x85\xe0\xc2\xc9\xae\x3f\xca\xb0\xe9\x38\xd5\xb4\xad\xdb\x58\x5f\x2a\x2a\x30\x3d\xdd\x37\xb1\xef\xee\x2e\x0c\xe4\xf6\x58\xd1\x97\x29\xef\x04\x61\x25\x55\x0a\x06\x63\xf1\xe9\x6d\xc1\x4b\x6c\xcb\x49\x4b\x7e\x6b\x85\x08\x67\xab\x0c\xa2\x7d\x11\x99\x5d\x19\xb9\x61\x35\x26\x44\x28\xab\x33\x80\x83\xb2\x3b\x3a\x4c\x9b\x03\xae\x5c\xfc\xaa\xf1\xfe\x75\x02\x8c\x66\x5e\x93\xd5\xb1\x4d\xd3\x6f\x85\xf4\xa5\x5a\xec\x3a\xaf\x30\x27\xf7\x2a\x23\x69\x8e\x07\xa9\xf2\x8e\xe6\xf8\x23\x2a\x82\xb7\x12\x05\x23\xd9\x41\xca\x9c\xda\x45\xdf\x59\xa1\x41\xf5\xe2\x67\x59\xc6\xbf\x62\xfa\xfc\x9a\xd3\xa4\x8d\xed\x7d\xaa\x99\x50\x3b\x63\xfa\x1e\xa0\xa3\x96\x89\xdc\xf9\x80\x76\xcb\xb6\x2c\x50\xeb\x3e\x71\xca\x76\x04\xb8\x8c\x96\x10\x5d\x2a\xb4\x7a\xa9\x33\xce\xb3\x4a\xf2\x0d\x32\x14\x44\xea\x1d\x33\x64\x23\xec\xd8\x06\x0f\x70\x72\x2b\x04\x11\x93\x6c\x70\x4e\x54\x82\x67\xd3\xbc\xba\x34\xe7\x78\x87\xc7\xa5\x51\xcf\xcb\x05\xdf\x42\xb3\x8d\x84\xf8\x35\xb9\x7d\x85\x6c\x23\xaf\xe1\xe9\x14\xdd\x5e\x93\x5b\x9a\x57\xb9\x59\x32\x55\x43\x45\x6d\xf9\x28\xca\x9a\x64\x25\x7e\x33\x95\x28\x3b\x48\x25\xca\xee\xa9\x52\xc3\xe7\xdb\xab\x44\x6e\xf5\x1b\x09\x3c\x8d\x9f\x0e\x1d\x0c\xeb\x8c\x13\x39\x29\xff\x58\x27\xbe\x54\x0b\x0e\xf4\xe1\x7b\xfb\x82\xf2\x70\xfa\xda\xc2\x76\xaa\xd0\x67\x6c\xb2\xc8\x94\xc9\x79\x47\xec\xc5\x43\xfb\x69\x2c\x10\x1f\xd2\x6b\x26\x4e\x0f\xf7\x9a\x93\xe2\x1b\x78\x6d\xa2\xcc\xf7\x71\x5a\x2b\xf5\x3f\xe7\xb4\x1f\xb5\xf8\xfa\x3b\xe9\xe3\xbb\x16\x5b\x0f\x23\xf8\x77\x2c\xae\x1e\x28\xb6\x7a\x07\x7b\xa6\xd2\x35\x64\xc8\x3a\xa5\xdb\x02\x7e\x83\xa7\x8d\x4c\xb6\xe1\x0c\xa7\xf8\x6f\x1d\x16\x03\x7b\xd6\x36\xab\x71\x67\x95\xbb\x7b\xa0\x99\xbb\x99\x2b\x30\xa1\x6b\x9a\xe8\x7e\xec\x25\x17\x4d\x8f\x13\x34\xdf\x0d\x35\x98\xde\xdc\x9d\x98\xee\xb5\xfd\x41\x81\xbe\xc5\xfd\x8c\x77\xae\x8b\x1b\xbe\x84\x18\xe2\x3e\xd7\x10\xee\x12\xaf\x75\xff\x80\x20\xba\xf5\xa3\x6b\xb8\x59\x02\xff\xac\x02\xa6\x9f\x61\xdb\xc0\xbd\x26\xc5\x07\xc5\xe2\xe3\xaf\x6a\xc1\xd6\xb7\xcd\xcd\xcc\x5a\xeb\xf8\x18\xfe\x87\x90\xf0\x2a\x4b\x75\x8b\xb7\xa6\x2c\x05\x2a\x97\x50\x72\xc8\x50\xfe\x52\x42\x72\x8d\xc9\x67\xe0\xf6\xa9\x99\x7f\x45\x01\x09\x29\x11\x28\x4b\xf1\x16\x53\x28\x0b\x4c\x20\x27\xc5\x6c\xe4\xaa\xf8\x95\x5a\xfa\x9c\x94\xd8\x23\xa0\x7b\x54\xed\x55\xbc\x0c\xbc\xb4\xae\xb2\xcc\xf3\x42\x19\xce\xcc\x49\x31\xea\x8f\x01\x2e\xf3\x85\x5a\xfd\xc1\xb8\xe3\xe3\x34\x6f\xec\x55\x38\xd0\x73\xb6\xef\xd7\x18\xc1\xcc\x9d\xd7\x21\x52\xe8\xb7\xa1\x46\x65\x15\x90\xfd\x38\xfb\x7e\xa7\x11\xf2\x38\x39\x44\x57\xad\x6a\xfb\xc3\x17\x77\xaf\x49\x37\x94\x91\xec\x82\xab\xd4\xb3\x7b\x6b\x10\xf5\xa5\xa6\x68\x35\x1a\xe6\x6e\x7f\xdb\xeb\xc6\xde\x8e\x05\xc0\xa7\xae\x76\xdb\x0e\xd5\x75\x78\x38\x5e\x92\xf2\x96\xea\x3e\x6c\x35\xd0\x1f\x1e\xd5\xf5\x41\x3d\x5c\x5b\x48\x34\xcb\xea\x26\x21\x2e\xbb\x3a\x75\x5a\x3d\x27\x99\x4f\x5e\xf5\x36\x85\x83\x5a\x39\xe8\xde\x97\x0c\x80\x80\xbc\x1a\x70\xce\x38\xb8\x40\xed\xa3\x37\x2c\xbb\xf3\xb0\x3d\xaa\x91\xba\x33\x6f\x14\x37\xb8\xc6\x6f\x46\x7d\xaa\xc1\xed\xcc\x9b\x8a\xeb\x8a\xaf\x66\x74\xe8\x48\x3e\xea\xf2\xd6\x2b\x9b\x10\xe9\xc0\x29\x89\xbc\x77\x3e\x43\xb1\x41\xc0\x68\xd6\xeb\x7d\x3d\x1c\x72\x67\x55\x7e\x0f\xce\x7d\x77\xa2\x7d\x4e\xdd\x6e\x21\x21\x05\x95\x5a\x46\x98\x9b\xfc\x1d\xe0\x2d\xee\x29\xb8\xab\x1f\x0f\x11\xfd\xa8\xae\x23\xcf\x91\x4e\x9f\x68\x22\xff\x03\x59\xf5\x70\x0a\x18\x41\x3f\xa7\x6e\x24\x0d\x84\x56\x21\x30\x09\xf7\x6f\x4b\x73\xe1\xea\xcd\x99\x10\xac\xc1\x9b\x8e\x83\x6c\x88\x36\xcd\x75\x1e\x48\x46\x61\xbd\xab\x59\x33\x60\x09\x46\xc4\x76\x74\x14\xe8\x25\xcd\x24\x0a\xfd\xa3\xa1\x66\xac\xa5\x19\xb8\x60\xce\x38\x22\x17\x48\x37\xec\xbf\xe8\x25\x93\x96\x66\x11\xfd\x39\x53\x10\x73\x22\x03\xb4\x9c\x48\x9b\xef\x9a\xc1\xf1\x44\xd7\x3e\xdc\x18\xba\xf9\x36\x12\x35\x63\xa3\x28\xde\x1b\x6c\x33\xd6\xd2\x0c\x5a\x30\x67\x1c\x51\xd5\x5c\x1e\x98\xfa\xb4\x38\x76\x64\x14\xc2\xbf\xbc\xb2\x43\x0d\x69\xb5\x7b\xbd\x35\x01\xae\x93\x5e\x1d\x65\xb5\x73\xcf\x32\x8a\xe5\x5d\x42\x39\x30\x47\x5a\xed\x5e\x53\x4d\x80\xeb\x8a\x66\x29\xab\x9d\xcb\x84\x31\xac\xf0\x34\xf5\x0e\xd1\xc9\x67\xa7\x3e\xb4\xc2\xdd\xd3\x90\x8c\x3c\xfe\x8c\x51\xb8\x73\x41\x73\x22\xee\x82\xbd\xd3\xd2\x0c\x60\x30\x67\x14\xf1\x2d\x92\x34\x3c\xd8\x1d\x65\x65\x2f\x70\x9b\xf1\x09\x58\xe1\xdd\x83\xc2\x32\x94\x55\xf7\x32\x78\x14\xeb\xa2\xb3\x17\x2f\xbc\xbd\x78\x31\x79\x2f\x5e\x98\x47\xb8\x16\x45\x7f\x5b\x14\x37\x36\x8e\x52\x5d\xd9\x57\x44\x07\x63\x08\xee\x37\xcb\xcd\xf0\x78\x3c\xec\x3c\xa5\x01\x34\x24\x23\x96\x3f\x63\x1c\x2e\x10\xcb\x93\x69\x44\x20\x8d\xbc\xf3\x4b\x8f\x43\x3a\xb8\x6f\xd4\xaf\x0c\x30\xfb\x67\x1a\x17\x5b\x26\x3d\x76\x2d\xf0\xd8\xb5\x3c\x76\x2d\x8f\x5d\xcb\x63\xd7\xf2\xd8\xb5\x3c\x76\x2d\x8f\x5d\xcb\x63\xd7\xf2\xd8\xb5\x3c\x76\x2d\x3f\x62\xd7\xf2\x57\x00\x00\x00\xff\xff\x28\x67\xf4\xe8\xf3\x3c\x00\x00")

func templatesModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotpl,
		"templates/model.gotpl",
	)
}

func templatesModelGotpl() (*asset, error) {
	bytes, err := templatesModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotpl", size: 15603, mode: os.FileMode(420), modTime: time.Unix(1521002654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRelationships_registryGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x6b\xdb\x30\x14\xc7\xef\xfa\x14\x7f\x4c\x19\x09\xa4\xf6\xce\x81\x1c\x46\x07\xa5\x87\x8d\x91\xb2\x53\xc8\x41\x95\x5f\x1c\x51\xfb\xc9\xc8\xcf\x19\x41\xe8\xbb\x8f\xd8\x49\x9b\x30\x97\x30\x5c\x4a\x8f\x7a\xf2\xfb\xbd\xff\x4f\x12\xae\xb5\x79\xd6\x05\x21\x04\xa4\x8f\x24\xe9\x9d\xe3\x8d\x2d\x5a\xaf\xc5\x3a\x4e\x7f\xea\x8a\x10\xa3\x52\xb6\xaa\x9d\x17\x24\x85\x95\x6d\xfb\x94\x1a\x57\x65\xba\x76\x9e\xc4\xdd\x5a\x36\x19\x95\x54\x11\x8b\x2e\x13\xa5\x8c\xe3\x46\xc0\x2e\x77\xe6\x51\xbc\xe5\x02\x0b\x24\xab\x6e\xbd\x4e\x90\x65\x60\x57\x5a\x96\x39\x76\xda\x9b\x2d\x99\xe7\x59\x4e\x3a\x37\x2e\x27\xa5\xd4\x4e\x7b\x78\x2a\xbb\xe9\xcd\xd6\xd6\xcd\x92\x0a\xdb\x88\xdf\xe3\x65\x44\xba\x1c\xda\x57\x2a\xcb\x70\xb1\x03\x4f\xd2\x7a\x6e\x20\x5b\x42\xe5\x72\x2a\x2f\xc9\xa9\xda\xb4\x6c\x2e\x7b\x26\xd3\x6b\x73\x10\x94\xc2\x11\x3d\x9c\x54\x45\xd5\x93\x2d\x5b\x99\x4c\x4f\x0d\x43\xac\xc5\xb5\x69\x21\x1e\x9a\x43\x80\xd7\x5c\x10\x6e\x88\xc5\xca\xfe\x70\x2b\x33\xdc\x9c\x98\x98\x2f\xfa\xbb\xbb\xd4\x8f\xf1\xad\xb9\xab\x10\xce\x48\x31\x3e\xe4\xfd\x6a\x8d\x05\xbe\x0c\x27\x0a\x0a\x38\x04\xb9\x85\xdd\xa0\x10\x4c\x4a\xe2\xd7\x04\xe9\xb7\xb2\x74\x7f\x9a\x3b\x4f\x5a\x68\x8a\xaf\xfd\x6c\xe0\xbc\x3c\x47\xa5\xeb\x55\xd3\xbd\x88\xf5\x93\x73\x25\x7a\x66\x4f\x3d\xfa\xd5\xda\x13\xcb\x41\xe8\x95\x7d\x4f\x82\xc4\x74\x8c\xe4\x04\x06\x92\x10\x5e\x3e\x8f\x31\xc1\x1c\xe2\x5b\x9a\x9d\x21\x89\xf3\xd3\xe7\x71\xa6\x06\xaa\x57\x6c\x7e\xd7\xf9\x90\x4d\x5f\x1e\x67\xd3\x76\x8c\x91\x36\x7d\x9c\x5f\x5a\xcc\xf6\x13\xa4\xf9\xbf\xb3\xfd\x4e\x25\x0d\x9c\x6d\x5f\x1e\x67\x93\x77\x8c\x0f\xb5\xb9\x27\xf9\x47\x65\x49\xe2\x2d\xed\x46\xca\x14\x24\x1f\x6d\xf2\x43\xf3\xfe\x4d\x9b\xc3\xe6\x68\xa3\x4a\xf3\xfe\x5d\xde\xfe\x03\x6f\xdc\x67\x48\x73\x51\x8d\xfd\x0f\xfb\xb8\x8e\xea\x6f\x00\x00\x00\xff\xff\xf1\xb5\xf1\x24\x61\x07\x00\x00")

func templatesRelationships_registryGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRelationships_registryGotpl,
		"templates/relationships_registry.gotpl",
	)
}

func templatesRelationships_registryGotpl() (*asset, error) {
	bytes, err := templatesRelationships_registryGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/relationships_registry.gotpl", size: 1889, mode: os.FileMode(420), modTime: time.Unix(1518473635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.md": templatesReadmeMd,
	"templates/identities_registry.gotpl": templatesIdentities_registryGotpl,
	"templates/model.gotpl": templatesModelGotpl,
	"templates/relationships_registry.gotpl": templatesRelationships_registryGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{templatesReadmeMd, map[string]*bintree{}},
		"identities_registry.gotpl": &bintree{templatesIdentities_registryGotpl, map[string]*bintree{}},
		"model.gotpl": &bintree{templatesModelGotpl, map[string]*bintree{}},
		"relationships_registry.gotpl": &bintree{templatesRelationships_registryGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

