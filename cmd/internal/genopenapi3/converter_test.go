package genopenapi3

import (
	"os"
	"path/filepath"
	"testing"

	"go.aporeto.io/regolithe/spec"
)

func TestConverter_Do(t *testing.T) {

	cases := map[string]struct {
		inSpec string
		outDoc string
	}{
		"test": {
			inSpec: `
        # Model
        model:
          rest_name: log
          resource_name: logs
          entity_name: Log
          package: highwind
          group: integration/app
          description: Retrieves the logs of a deployed application.

        # Attributes
        attributes:
          v1:
          - name: data
            description: Contains all log data.
            type: external
            exposed: true
            subtype: map[string]string
            read_only: true
            autogenerated: true
      `,
			outDoc: "world",
		},
	}

	rootTmpDir, err := os.MkdirTemp("", t.Name()+"_*")
	if err != nil {
		t.Fatalf("error creating temporary directory for test function: %v", err)
	}
	defer os.RemoveAll(rootTmpDir)

	for name, c := range cases {
		t.Run(name, func(t *testing.T) {

			specDir, err := os.MkdirTemp(rootTmpDir, name)
			if err != nil {
				t.Fatalf("error creating temporary directory for test case: %v", err)
			}

			tmpFile, err := os.Create(
				filepath.Join(specDir, "inSpec_testdata.spec"),
			)
			if err != nil {
				t.Fatalf("error creating temporary file: %v", err)
			}
			if _, err := tmpFile.WriteString(c.inSpec); err != nil {
				t.Fatalf("error writing spec data for test case to temporary file: %v", err)
			}

			spec, err := spec.LoadSpecificationSet(specDir, nil, nil, "openapi3")
			if err != nil {
				t.Fatalf("error parsing spec set from test data: %v", err)
			}

			_ = spec
		})
	}
}
