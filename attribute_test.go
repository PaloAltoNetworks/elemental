// Author: Antoine Mercadal
// See LICENSE file for full LICENSE
// Copyright 2016 Aporeto.

package elemental

import (
	"testing"

	. "github.com/smartystreets/goconvey/convey"
)

func TestAttribute_Interface(t *testing.T) {

	Convey("Given I create a new *List", t, func() {

		l := NewList()

		Convey("Then the list should implement the AttributeSpecifiable interface", func() {
			So(l, ShouldImplement, (*AttributeSpecifiable)(nil))
		})
	})
}

func TestAttribute_SpecificationForAttribute(t *testing.T) {

	Convey("Given I create a new List", t, func() {

		l := NewList()

		Convey("When I get the Attribute specification for the name", func() {

			spec := l.SpecificationForAttribute("Name")

			Convey("then it should be correct", func() {
				So(spec.AllowedChars, ShouldEqual, "")
				So(len(spec.AllowedChoices), ShouldEqual, 0)
				So(spec.Autogenerated, ShouldBeFalse)
				So(spec.Availability, ShouldBeEmpty)
				So(spec.Channel, ShouldBeEmpty)
				So(spec.CreationOnly, ShouldBeFalse)
				So(spec.DefaultOrder, ShouldBeFalse)
				So(spec.Deprecated, ShouldBeFalse)
				So(spec.Exposed, ShouldBeTrue)
				So(spec.Filterable, ShouldBeTrue)
				So(spec.ForeignKey, ShouldBeFalse)
				So(spec.Format, ShouldEqual, "free")
				So(spec.Getter, ShouldBeTrue)
				So(spec.Identifier, ShouldBeFalse)
				So(spec.Index, ShouldBeFalse)
				So(spec.MaxLength, ShouldEqual, 0)
				So(spec.MaxValue, ShouldEqual, 0)
				So(spec.MinLength, ShouldEqual, 0)
				So(spec.MinValue, ShouldEqual, 0)
				So(spec.Orderable, ShouldBeTrue)
				So(spec.PrimaryKey, ShouldBeFalse)
				So(spec.ReadOnly, ShouldBeFalse)
				So(spec.Required, ShouldBeTrue)
				So(spec.Setter, ShouldBeTrue)
				So(spec.Stored, ShouldBeTrue)
				So(spec.SubType, ShouldBeEmpty)
				So(spec.Transient, ShouldBeFalse)
			})
		})
	})
}
